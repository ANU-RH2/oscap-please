#                             _______  _____
#                             |______ |   __| |
#                             ______| |____\| |_____
#
#      _____ __   _ _______ _______  ______ _______ _______ _______ _______
#        |   | \  |    |    |______ |_____/ |______ |_____| |       |______
#      __|__ |  \_|    |    |______ |    \_ |       |     | |_____  |______
#
#       Written By: Theodore Olsauskas-Warren
#               In: August 2014
#
#
# Object defines interactions with SQL database, handles opening, closing
# and inserting information. Uses the schema defined within the definition
# class to determine how the created relation looks. Also handles errors
# generated by PSQL. Most errors are non fatal, e.g. a table already existing
# in which case it simply prints a warning statement.
# TODO is to change the printing to console to a logging system

__author__ = 'u5195918'
import psycopg2
from XMLtoSQL.Definition import Definition

class SQLInterface:
    def __init__(self, database_name, database_user):
        # Attempt to connect to provided database
        try:
            connection_string = 'dbname=' + database_name + \
                                ' user=' + database_user
            self.conn = psycopg2.connect(connection_string)
        #TODO Figure out which exception exactly
        except Exception:
            print ("Failure Connecting to Database, Check that Database "
                   + database_name + " exists and user " + database_user
                   + " can connect")
            exit()
        self.cur = self.conn.cursor()
        print('Connected to Database')

    def create_table(self, schema):
        # The table is always called osp, non-negotiable.
        # Check if the table already exists.
        execution_string = 'select count(*) from pg_class where  \
                           relname=\'osp\' and relkind=\'r\''

        try:
            self.cur.execute(execution_string)
        except psycopg2.IntegrityError, e:
            print 'Failure testing if table already exists'
            print e.pgerror

        rows = self.cur.fetchall()

        # Does one exist?
        if rows[0][0] != 1:
            # No it doesn't, Create it.
            # Build execution string from schema
            execution_string = 'create table osp('

            for key, value in Definition.schema:
                execution_string += key + ' ' + value + ', '

            # Remove trailing comma and close
            execution_string = execution_string[:-2] + ');'

            try:
                self.cur.execute(execution_string)
            except psycopg2.IntegrityError, e:
                print 'Error Creating Table'
                print e.pgerror
                quit()

            print 'Table Created'
            self.conn.commit()
        else:
            print 'Table osp already exists'

    def insert_into_table(self, definition):
        # Insert Definition into Database
        execution_string = 'insert into osp('

        # Loop through schema values, ignoring the last as it is the
        # primary key
        for key, value in Definition.schema[:-1]:
                execution_string += key + ', '
        # Remove Trailing Comma and close
        execution_string = execution_string[:-2] + ')'

        execution_string += ' values( '

        for key, value in Definition.schema[:-1]:
            execution_string += \
                '\'' + self.sanitize(vars(definition).get(key)) + '\', '

        # Remove Trailing Comma and close
        execution_string = execution_string[:-2] + ')'
        try:
            self.cur.execute(execution_string)
        except psycopg2.IntegrityError, e:
            print execution_string
            print 'Error inserting row'
            print e.pgerror

        self.conn.commit()

    @staticmethod
    def sanitize(string):
        # Sanitize string for input into SQL database
        # TODO Extend this past just changing apostrophes
        try:
            return_string = \
                string.__str__().decode('ascii', 'ignore').replace('\'', '\\\'')
            return return_string
        except UnicodeEncodeError:
            return 'ENCODING ERROR'
            # TODO Make this do something better..



